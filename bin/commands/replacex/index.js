// Generated by CoffeeScript 1.4.0

/*
	Replace something in files

	@author ijse
*/


(function() {
  var FilterUtil, fs, path, _, _ref;

  _ref = [require("fs"), require("path"), require("underscore")], fs = _ref[0], path = _ref[1], _ = _ref[2];

  FilterUtil = require("../../utils/filter");

  exports.invoke = function(program) {
    var Config, Cwd, Target, configPath, data, file, fileList, oStrReg, parseArray, _i, _len, _ref1, _ref2;
    Cwd = process.cwd();
    parseArray = function(val) {
      return val.split(",");
    };
    program.usage("orz replacex [options] <file ...>").option("-c, --config [config_file]", "Specify the config file, default to config.json").option("-o, --oldStr <string>", "String to be replaced").option("-n, --newStr <string>", "New string").option("-i, --include [include_files]", "Only include files", parseArray).option("-e, --exclude [exclude_files]", "Files that not included, regex expression", parseArray).parse(process.argv);
    console.log("Arguments:");
    console.log("config: ", program.config);
    console.log("include: ", program.include);
    console.log("exclude: ", program.exclude);
    console.log("args: ", program.args);
    console.log("target: ", (_ref1 = program.args[1]) != null ? _ref1 : Cwd);
    Config = {
      include: [],
      exclude: []
    };
    Target = (_ref2 = program.args[1]) != null ? _ref2 : Cwd;
    if (program.config) {
      configPath = path.join(Cwd, program.config);
      Config = require(configPath);
    }
    if (program.include) {
      _.extend(Config, {
        include: program.include
      });
    }
    if (program.exclude) {
      _.extend(Config, {
        exclude: program.exclude
      });
    }
    if (program.newStr) {
      _.extend(Config, {
        newStr: program.newStr
      });
    }
    if (program.oldStr) {
      _.extend(Config, {
        oldStr: program.oldStr
      });
    }
    console.log("Final configuration: ", Config);
    fileList = FilterUtil.getFileList(Target, Config);
    console.log("File to process:");
    console.log(fileList);
    for (_i = 0, _len = fileList.length; _i < _len; _i++) {
      file = fileList[_i];
      if (!(fileList)) {
        continue;
      }
      console.log("Read file ==>" + file);
      data = fs.readFileSync(file, "utf8");
      console.log("Process: " + Config.oldStr + " -> " + Config.newStr);
      oStrReg = new RegExp(Config.oldStr);
      if (oStrReg.test(data)) {
        console.log("Found oldstr, replace");
        data = data.replace(oStrReg, Config.newStr);
        fs.writeFileSync(file, data, "utf8");
      }
    }
    return console.log("done!");
  };

}).call(this);
