// Generated by CoffeeScript 1.4.0

/*
 filter
 	根据配置文件过滤文件工具命令

 @author ijse
*/


(function() {
  var Cwd, Printer, checkExcludes, fs, path, readFolder, _, _ref, _ref1;

  _ref = [require('fs'), require('path'), require('underscore')], fs = _ref[0], path = _ref[1], _ = _ref[2];

  _ref1 = [], Printer = _ref1[0], Cwd = _ref1[1];

  exports.getFileList = function(_file, config) {
    return readFolder(_file, config);
  };

  readFolder = function(theFile, config) {
    var allFile, cfg, file, files, list, vfile, _i, _len, _ref2;
    theFile = path.resolve(process.cwd(), theFile);
    if (!fs.lstatSync(theFile).isDirectory) {
      return [theFile];
    }
    _ref2 = [[], _.clone(config)], allFile = _ref2[0], cfg = _ref2[1];
    files = fs.readdirSync(theFile).filter(function(file) {
      var it, _i, _len, _ref3, _ref4, _results;
      if (!(cfg != null ? (_ref3 = cfg.include) != null ? _ref3.length : void 0 : void 0)) {
        return true;
      }
      _ref4 = cfg.include;
      _results = [];
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        it = _ref4[_i];
        if (cfg.include.length) {
          if (it != null ? typeof it.test === "function" ? it.test(file) : void 0 : void 0) {
            _results.push(Printer("Skip file: ", it));
          } else {
            _results.push(void 0);
          }
        }
      }
      return _results;
    });
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      vfile = path.resolve(theFile, file);
      if (fs.lstatSync(vfile).isDirectory()) {
        list = readFolder(vfile, cfg);
        allFile.push.apply(allFile, list);
      } else {
        if (!checkExcludes(vfile, cfg.exclude)) {
          continue;
        }
        allFile.push(vfile);
      }
    }
    return allFile;
  };

  checkExcludes = function(file, excludeList) {
    var pattern, rule, _i, _len;
    for (_i = 0, _len = excludeList.length; _i < _len; _i++) {
      rule = excludeList[_i];
      if (!(excludeList)) {
        continue;
      }
      pattern = new RegExp(rule);
      if (pattern.test(file)) {
        return false;
      }
    }
    return true;
  };

}).call(this);
